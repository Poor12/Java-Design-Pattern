//抽象工厂模式，是围绕一个超级工厂创建其他工厂，该超级工厂称为其他工厂的工厂，在抽象工厂模式中，接口是负责创建一个相关或相互依赖对象的接口，而无需指定它们具体的类
interface Shape{
    void draw();
}

class Rectangle implements Shape{

    @Override
    public void draw() {
        System.out.println("Inside Rectangle::draw()");
    }
}

class Square implements Shape{

    @Override
    public void draw() {
        System.out.println("Inside Square::draw()");
    }
}

interface Color{
    void fill();
}

class Red implements Color{

    @Override
    public void fill() {
        System.out.println("Inside Red::fill()");
    }
}

class Green implements Color{

    @Override
    public void fill() {
        System.out.println("Inside Green::fill()");
    }
}

abstract class AbstractFactory{
    public abstract Color getColor(String color);
    public abstract Shape getShape(String shape);
}

class ShapeFactory extends AbstractFactory{

    @Override
    public Color getColor(String color) {
        return null;
    }

    @Override
    public Shape getShape(String shape) {
        if(shape==null){
            return null;
        }
        if(shape.equalsIgnoreCase("rectangle")){
            return new Rectangle();
        }
        else if(shape.equalsIgnoreCase("square")){
            return new Square();
        }
        return null;
    }
}

class ColorFactory extends AbstractFactory{

    @Override
    public Color getColor(String color) {
        if(color==null)
            return null;
        if(color.equalsIgnoreCase("red")){
            return new Red();
        }
        else if(color.equalsIgnoreCase("green")){
            return new Green();
        }
        return null;
    }

    @Override
    public Shape getShape(String shape) {
        return null;
    }
}
class FactoryProducer{
    public static AbstractFactory getFactory(String choice){
        if(choice.equalsIgnoreCase("shape"))
            return new ShapeFactory();
        else if (choice.equalsIgnoreCase("color"))
            return new ColorFactory();
        return null;
    }
}
public class Main{
    public static void main(String[] args){
        AbstractFactory shapeFactory=FactoryProducer.getFactory("shape");
        Shape shape1=shapeFactory.getShape("square");
        shape1.draw();
        AbstractFactory colorFactory=FactoryProducer.getFactory("color");
        Color color1=colorFactory.getColor("red");
        color1.fill();

    }
}
