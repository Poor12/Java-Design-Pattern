1.设计就是找到软件对象，分配职责，协作
2.设计目标：可扩展性，灵活性，健壮性，可插入性
3.好的设计：容易理解，容易修改和扩展，容易复用，容易实现与应用，简单、紧凑、经济适用
4.坏的设计：僵化性，脆弱性，牢固性，粘滞性，复杂性，不必要的重复，晦涩性
5.基本设计原则：
1.LSP：Liskov替换原则：子类对象必须可以替换基类对象，契约式设计，Meyer规则
2.OCP：开放-封闭原则：软件实体应该是可扩展的，但是不可修改的，对于扩展是开放的，对于更改是封闭的，关键在于抽象
3.SRP：单一职责原则，有关类的职责分配问题，是面向对象设计中最重要的基本原则，就一个类而言，应该仅有一个引起它变化的原因
4.ISP：接口隔离原则，客户不应该依赖他们用不到的方法，只给每个客户它所需要的接口
5.DIP：依赖倒置原则，高层模块不应该依赖于低层模块，二者都依赖于抽象，抽象不应依赖于细节，细节应该依赖于抽象
6.LoD：迪米特法则，类之间有相互依赖关系时，这种依赖关系建立的息信基础要小，也就是一个类对另一个类的了解越少越好，如果需要组合使用一个类的多个方法的时候，将该组合的流程在被依赖类中实现，以public接口提供，而不要写在依赖类中
7.设计模式的基本要素：
1.名称 2.问题 3.解决方案 4.效果
8.职责可分成两类：“认知”责，“行为”职责
9.设计模式：1.创建者，谁应该负责产生类的实例，如果符合下面的一个或者多个条件，则可将创建类A实例的职责分配给类B 2.信息专家：给对象分配职责的通用原则，将职责分配给拥有履行一个职责所必需信息的类 3.低耦合，支持低的依赖性，减少变更带来的影响，提高重用性 4.控制器，负责处理一个输入系统事件 5.高内聚，使得复杂性可管理 6.多态，处理基于类型的不同选择 7.纯虚构，不想破坏高内聚和低耦合的设计原则时，谁来负责处理这种情况 8.间接性，分配职责以避免两个（或多个）事物之间的直接耦合 9.防止变异，分配职责给对象、子系统和系统，使得这些元素中的变化或不稳定的点不会对其他元素产生不利影响
10.面向对象的分析（object oriented analysis）强调在问题域内发现和解决问题
11.面向对象的设计（object oriented design）强调定义软件对象使他们相互协作实现需求
12.用例之间的关系：包含和扩展
1.A扩展B，说明A自己也可以执行，有了B有了一个新功能
2.A包含B，说明A只有借助B才能实现功能
13.设计模式：工厂模式（为了更好的内聚性希望分离创建职责）、单例模式、适配器模式（继承类实现接口，如何解决不相容的接口问题），组合模式（对象的组合），外观模式（为子系统的接口提供一致的界面），观察者模式（subject，observer），策略模式（接口继承型，如何设计变化但相关的算法或政策）
