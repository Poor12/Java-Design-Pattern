//装饰器模式的意图是在运行时组合操作的新变化
//装饰器模式允许向一个现有的对象添加新的功能，同时又不改变其结构
interface Shape{
    void draw();
}

class Rectangle implements Shape{

    @Override
    public void draw() {
        System.out.println("Shape: Rectangle");
    }
}

class Circle implements Shape{

    @Override
    public void draw() {
        System.out.println("Shape Circle");
    }
}

//抽象装饰类,可加abstract
class ShapeDecorator implements Shape{
    protected Shape decoratedShape;
    public ShapeDecorator(Shape decoratedShape){
        this.decoratedShape=decoratedShape;
    }

    @Override
    public void draw() {
        decoratedShape.draw();
    }
}

//实体装饰类
class RedShapeDecorator extends ShapeDecorator{

    public RedShapeDecorator(Shape decoratedShape) {
        super(decoratedShape);
    }

    @Override
    public void draw() {
        decoratedShape.draw();
        setRedBorder(decoratedShape);
    }

    private void setRedBorder(Shape decoratedShape){
        System.out.println("Border Color: Red");
    }
}

class BlueShapeDecorator extends ShapeDecorator{


    public BlueShapeDecorator(Shape decoratedShape) {
        super(decoratedShape);
    }

    @Override
    public void draw() {
        decoratedShape.draw();
        setBlue(decoratedShape);
    }

    private void setBlue(Shape decoratedShape){
        System.out.println("Inside: Blue");
    }
}
public class Main{

    public static void main(String[] args){
        ShapeDecorator circle=new ShapeDecorator(new Circle());
        ShapeDecorator redCircle=new RedShapeDecorator(circle);
        ShapeDecorator redRectangle=new RedShapeDecorator(new Rectangle());
        Shape brcircle=new BlueShapeDecorator(redCircle);
        //System.out.println("Circle with normal border");
        circle.draw();
        redCircle.draw();
        redRectangle.draw();
        brcircle.draw();
    }
}