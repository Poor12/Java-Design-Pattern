//合成模式，是一组对象的组合，这些对象可以是容器对象，表现为组的概念；另一些对象则表达了单对象。
//在对组合进行建模时必须注意：1。组对象允许包含单对象，也可以再包含其他的组对象。2。要为组合对象和单对象定义共同的行为
//合成模式的意图是为了保证客户端调用单对象与组合对象的一致性


import javax.swing.text.html.HTMLDocument;
import java.util.ArrayList;
import java.util.Iterator;
import java.util.List;
import java.util.Vector;

//安全模式
//透明式的合成模式--所有具体的子类中出现的方法必须在接口中进行规划化
interface Node{
    void print();//所有节点通用方法
}
class Leaf implements Node{
    private String name;

    @Override
    public void print() {
        System.out.println("我的名称："+name);
    }

    public String getName(){
        return name;
    }

    public void setName(String name){
        this.name=name;
    }
}
class Tree implements Node{
    private String name;

    private List<Node> nodes;

    public boolean addNode(Node node){
        if(node==null||nodes==null)
            throw new NullPointerException("");
        return nodes.add(node);
    }

    public boolean removeNode(Node node){
        if(node==null||nodes==null)
            throw  new NullPointerException("");
        return nodes.remove(node);
    }

    public List<Node> getAllNodes(){
        return nodes;
    }
    @Override
    public void print() {
        System.out.println("我是一个"+name);
//        System.out.println("整棵树打印"+new Gson().toJson(this));
    }

    public String getName(){
        return name;
    }

    public void setName(String name){
        this.name=name;
    }

    public List<Node> getNodes(){
        return nodes;
    }

    public void setNodes(List<Node> nodes)
    {
        this.nodes=nodes;
    }
}
public class Main {

    public static void main(String[] args) {
        Tree root=new Tree();
        Tree lefttree=new Tree();
        Tree righttree=new Tree();
        Leaf leftleaf=new Leaf();
        Leaf rightleaf=new Leaf();
        List<Node> rootchilds=new ArrayList<Node>();
        List<Node> leftchilds=new ArrayList<Node>();
        List<Node> rightchilds=new ArrayList<Node>();

        root.setName("根节点");
        root.setNodes(rootchilds);
        root.addNode(lefttree);
        root.addNode(righttree);

        lefttree.setName("左子树");
        lefttree.setNodes(leftchilds);
        leftleaf.setName("左叶子");
        lefttree.addNode(leftleaf);

        righttree.setName("右子树");
        righttree.setNodes(rightchilds);
        rightleaf.setName("右叶子");
        righttree.addNode(rightleaf);

        root.print();

    }
}


